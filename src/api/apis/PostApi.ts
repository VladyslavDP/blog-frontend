/* tslint:disable */
/* eslint-disable */
/**
 * Blog Core API
 * Blog Core API description
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PageableParams,
  PostControllerGetPosts200Response,
  PostCreateDto,
  PostUpdateDto,
} from '../models/index';
import {
    PageableParamsFromJSON,
    PageableParamsToJSON,
    PostControllerGetPosts200ResponseFromJSON,
    PostControllerGetPosts200ResponseToJSON,
    PostCreateDtoFromJSON,
    PostCreateDtoToJSON,
    PostUpdateDtoFromJSON,
    PostUpdateDtoToJSON,
} from '../models/index';

export interface PostControllerCreatePostRequest {
    postCreateDto: PostCreateDto;
}

export interface PostControllerDeletePostRequest {
    postId: string;
}

export interface PostControllerGetPostRequest {
    slug: string;
}

export interface PostControllerGetPostsRequest {
    page?: number;
    size?: number;
}

export interface PostControllerSearchPostsRequest {
    pageable: PageableParams;
    tags?: string;
    query?: string;
}

export interface PostControllerUpdatePostRequest {
    postId: string;
    postUpdateDto: PostUpdateDto;
}

/**
 * 
 */
export class PostApi extends runtime.BaseAPI {

    /**
     * Protected endpoint. Requires Bearer token for authentication. Available roles ‚Äì user
     * üîê Create a new post
     */
    async postControllerCreatePostRaw(requestParameters: PostControllerCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postCreateDto'] == null) {
            throw new runtime.RequiredError(
                'postCreateDto',
                'Required parameter "postCreateDto" was null or undefined when calling postControllerCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/post/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCreateDtoToJSON(requestParameters['postCreateDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Protected endpoint. Requires Bearer token for authentication. Available roles ‚Äì user
     * üîê Create a new post
     */
    async postControllerCreatePost(requestParameters: PostControllerCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postControllerCreatePostRaw(requestParameters, initOverrides);
    }

    /**
     * Protected endpoint. Requires Bearer token for authentication. Available roles ‚Äì user
     * üîê Delete a post by ID
     */
    async postControllerDeletePostRaw(requestParameters: PostControllerDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling postControllerDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/post/delete/{postId}`.replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Protected endpoint. Requires Bearer token for authentication. Available roles ‚Äì user
     * üîê Delete a post by ID
     */
    async postControllerDeletePost(requestParameters: PostControllerDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postControllerDeletePostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postControllerGetDataRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/post/data`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postControllerGetData(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postControllerGetDataRaw(initOverrides);
    }

    /**
     * Get a post by slug
     */
    async postControllerGetPostRaw(requestParameters: PostControllerGetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['slug'] == null) {
            throw new runtime.RequiredError(
                'slug',
                'Required parameter "slug" was null or undefined when calling postControllerGetPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/post/get/{slug}`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters['slug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get a post by slug
     */
    async postControllerGetPost(requestParameters: PostControllerGetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postControllerGetPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get all posts with pagination
     */
    async postControllerGetPostsRaw(requestParameters: PostControllerGetPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostControllerGetPosts200Response>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/post`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostControllerGetPosts200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all posts with pagination
     */
    async postControllerGetPosts(requestParameters: PostControllerGetPostsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostControllerGetPosts200Response> {
        const response = await this.postControllerGetPostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search posts by tags and query
     */
    async postControllerSearchPostsRaw(requestParameters: PostControllerSearchPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostControllerGetPosts200Response>> {
        if (requestParameters['pageable'] == null) {
            throw new runtime.RequiredError(
                'pageable',
                'Required parameter "pageable" was null or undefined when calling postControllerSearchPosts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['tags'] != null) {
            queryParameters['tags'] = requestParameters['tags'];
        }

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['pageable'] != null) {
            queryParameters['pageable'] = requestParameters['pageable'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/post/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostControllerGetPosts200ResponseFromJSON(jsonValue));
    }

    /**
     * Search posts by tags and query
     */
    async postControllerSearchPosts(requestParameters: PostControllerSearchPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostControllerGetPosts200Response> {
        const response = await this.postControllerSearchPostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Protected endpoint. Requires Bearer token for authentication. Available roles ‚Äì user
     * üîê Update an existing post
     */
    async postControllerUpdatePostRaw(requestParameters: PostControllerUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postId'] == null) {
            throw new runtime.RequiredError(
                'postId',
                'Required parameter "postId" was null or undefined when calling postControllerUpdatePost().'
            );
        }

        if (requestParameters['postUpdateDto'] == null) {
            throw new runtime.RequiredError(
                'postUpdateDto',
                'Required parameter "postUpdateDto" was null or undefined when calling postControllerUpdatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/post/update/{postId}`.replace(`{${"postId"}}`, encodeURIComponent(String(requestParameters['postId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostUpdateDtoToJSON(requestParameters['postUpdateDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Protected endpoint. Requires Bearer token for authentication. Available roles ‚Äì user
     * üîê Update an existing post
     */
    async postControllerUpdatePost(requestParameters: PostControllerUpdatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postControllerUpdatePostRaw(requestParameters, initOverrides);
    }

}
