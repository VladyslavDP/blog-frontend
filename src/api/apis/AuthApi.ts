/* tslint:disable */
/* eslint-disable */
/**
 * Blog Core API
 * Blog Core API description
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthControllerSignIn200Response,
  AuthUserChangePasswordDto,
  AuthUserCreateDto,
  AuthUserSignInDto,
} from '../models/index';
import {
    AuthControllerSignIn200ResponseFromJSON,
    AuthControllerSignIn200ResponseToJSON,
    AuthUserChangePasswordDtoFromJSON,
    AuthUserChangePasswordDtoToJSON,
    AuthUserCreateDtoFromJSON,
    AuthUserCreateDtoToJSON,
    AuthUserSignInDtoFromJSON,
    AuthUserSignInDtoToJSON,
} from '../models/index';

export interface AuthControllerChangePasswordRequest {
    authUserChangePasswordDto: AuthUserChangePasswordDto;
}

export interface AuthControllerCreatePostRequest {
    authUserCreateDto: AuthUserCreateDto;
}

export interface AuthControllerSignInRequest {
    authUserSignInDto: AuthUserSignInDto;
}

export interface AuthControllerSignOutRequest {
    authorization: string;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Change password
     */
    async authControllerChangePasswordRaw(requestParameters: AuthControllerChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['authUserChangePasswordDto'] == null) {
            throw new runtime.RequiredError(
                'authUserChangePasswordDto',
                'Required parameter "authUserChangePasswordDto" was null or undefined when calling authControllerChangePassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/change-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthUserChangePasswordDtoToJSON(requestParameters['authUserChangePasswordDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Change password
     */
    async authControllerChangePassword(requestParameters: AuthControllerChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerChangePasswordRaw(requestParameters, initOverrides);
    }

    /**
     * Sign-up
     */
    async authControllerCreatePostRaw(requestParameters: AuthControllerCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['authUserCreateDto'] == null) {
            throw new runtime.RequiredError(
                'authUserCreateDto',
                'Required parameter "authUserCreateDto" was null or undefined when calling authControllerCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/sign-up`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthUserCreateDtoToJSON(requestParameters['authUserCreateDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sign-up
     */
    async authControllerCreatePost(requestParameters: AuthControllerCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerCreatePostRaw(requestParameters, initOverrides);
    }

    /**
     * Sign in
     */
    async authControllerSignInRaw(requestParameters: AuthControllerSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthControllerSignIn200Response>> {
        if (requestParameters['authUserSignInDto'] == null) {
            throw new runtime.RequiredError(
                'authUserSignInDto',
                'Required parameter "authUserSignInDto" was null or undefined when calling authControllerSignIn().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/sign-in`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthUserSignInDtoToJSON(requestParameters['authUserSignInDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthControllerSignIn200ResponseFromJSON(jsonValue));
    }

    /**
     * Sign in
     */
    async authControllerSignIn(requestParameters: AuthControllerSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthControllerSignIn200Response> {
        const response = await this.authControllerSignInRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * sign out
     */
    async authControllerSignOutRaw(requestParameters: AuthControllerSignOutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['authorization'] == null) {
            throw new runtime.RequiredError(
                'authorization',
                'Required parameter "authorization" was null or undefined when calling authControllerSignOut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['authorization'] != null) {
            headerParameters['Authorization'] = String(requestParameters['authorization']);
        }

        const response = await this.request({
            path: `/auth/sign-out`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * sign out
     */
    async authControllerSignOut(requestParameters: AuthControllerSignOutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authControllerSignOutRaw(requestParameters, initOverrides);
    }

}
